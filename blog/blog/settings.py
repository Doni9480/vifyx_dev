"""
Django settings for blog project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path
from blog.utils import my_custom_upload_to_func

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-hqu-11onn^q7+kr(vgxm@)zo!5&*9+%p+lmx#c*t&shlfev07='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
DEV_DB = False
ALLOWED_HOSTS = ['*']
APPEND_SLASH = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'mptt',
    'drf_yasg',
    'rest_framework',
    'django_summernote',    
    'django_cleanup.apps.CleanupConfig',
    'django_apscheduler',
    'storages',
    # 'corsheaders',
    'constance',
    'constance.backends.database',
    
    'users',
    'surveys',
    'posts',
    'custom_tests',
    'quests',
    'comments',
    'blogs',
    'notifications',
    'campaign',
    'referrals',
    'periodic_bonuses',
    'albums',
]

CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'
CONSTANCE_CONFIG = {
    'LIMIT_CAMPAIGN': (10, 'Лимит компаний для одного пользователя'),
    'PERIODIC_SCORES': (100, 'Количество баллов периодического бонуса'),
    'TWITTER_CONNECT_SCORES': (150, 'Баллы за подключения Twitter аккаунта'),
    'TELEGRAM_WALLET_CONNECT_SCORES': (200, 'Баллы за подключение кошелька Telegram'),
    'POINT_INVITATION_BY_REFERRAL_LINK': (500, 'Награда (в баллах) за каждого приглашенного пользователя по реферальной ссылке'),
}

MPTT_ADMIN_LEVEL_INDENT = 20

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    # custom authentication
    'users.api.middlewares.AuthTokenMiddleware',
    # check a admin
    'blog.middlewares.AdminCheckMiddleware',
    # local timezone
    'blog.middlewares.TimezoneMiddleware',
    # notifications
    'blog.middlewares.NotificationsMiddleware',
    # for no authentication users
    'blog.middlewares.LanguageMiddleware',
    # 'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'blog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blog.wsgi.application'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 5
}

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
if DEV_DB:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'blog',
            'USER': 'user_blog',
            'PASSWORD': 'jfjsdDJUIA',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
   BASE_DIR / 'static'
]
# STATIC_ROOT = os.path.join(BASE_DIR, 'statics')

AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_SIGNATURE_VERSION = os.getenv('AWS_S3_SIGNATURE_VERSION', default='s3v4')
AWS_S3_USE_SSL = int(os.getenv('AWS_S3_USE_SSL', default=1))
AWS_S3_ENDPOINT_URL = os.getenv('AWS_S3_ENDPOINT_URL')
AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME')
USE_S3 = int(os.getenv('USE_S3', default=0))

if USE_S3:
    MEDIA_URL = f'{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/'
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
else:
    MEDIA_URL = 'media/'
    MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'users.User'

EMAIL_FROM = "support@blog.com"
EMAIL_HOST = ""
EMAIL_HOST_USER = ""
EMAIL_HOST_PASSWORD = ""
EMAIL_PORT = "25"
EMAIL_USE_TLS = True

GOOGLE_RECAPTCHA_PRIVATE_KEY = '6LfF49kpAAAAAIoI3hjKBld9lTTx2Q-UoleOQmPG'
GOOGLE_RECAPTCHA_PUBLIC_KEY = '6LfF49kpAAAAAFiEh0fNdLdOJHvlIWa5_PyqbslK'


SUMMERNOTE_CONFIG = {
    'attachment_upload_to': my_custom_upload_to_func,
    
    'summernote': {
        'width': '100%',
    }
}

# CORS_ALLOWED_ORIGINS = ["http://localhost:8080", "http://127.0.0.1:8080", "https://d991-185-138-186-34.ngrok-free.app"]

# CORS_ORIGIN_WHITELIST = (
#     'https://d991-185-138-186-34.ngrok-free.app',
#     # 'localhost:8080',
#     # 'localhost:8081',
#     # 'localhost',
#     # 'localhost:8888',
# )

# CSRF_TRUSTED_ORIGINS = ['http://localhost:8080', 'https://d991-185-138-186-34.ngrok-free.app']

# CORS_ALLOW_ALL_ORIGINS = True

# SECURE_SSL_REDIRECT = True  # Перенаправление всех HTTP-запросов на HTTPS
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')  # Убедитесь, что Django знает, что находится за прокси, который использует HTTPS
# CSRF_COOKIE_SECURE = True  # Убедитесь, что CSRF куки используются только по HTTPS
# SESSION_COOKIE_SECURE = True  # Убедитесь, что сессионные куки используются только по HTTPS